# This Azure Pipeline validates and deploys bundle config (ML asset config and more)
# defined under {{template `project_name_alphanumeric_underscore` .}}/assets/*
# and {{template `project_name_alphanumeric_underscore` .}}/databricks.yml.
# The bundle is validated (CI) upon making a PR against the {{template `default_branch` .}} branch.
# Bundle assets defined for staging are deployed when a PR is merged into the {{template `default_branch` .}} branch.
# Bundle assets defined for prod are deployed when a PR is merged into the {{template `release_branch` .}} branch.

trigger:
  branches:
    include:
      - {{template `default_branch` .}}
      - {{template `release_branch` .}}
  paths:
    include:
      - {{template `project_name_alphanumeric_underscore` .}}/*

variables:
  - workingDirectory: {{template `project_name_alphanumeric_underscore` .}}
  - group: {{template `project_name` .}} variable group

stages:
# Run BundleCI stage upon making a PR against the {{template `default_branch` .}} branch
- stage: BundleCI
  displayName: 'Bundle validation for {{template `project_name` .}}'
  # Trigger BundleCI stage on PR against the default branch, and not on pushes to other branches
  condition: |
    and(
      not(eq(variables['Build.Reason'], 'IndividualCI')),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/{{template `default_branch` .}}')
    )

  jobs:
  - job: StagingBundleCI
    displayName: 'Staging bundle validation for {{template `project_name` .}}'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Validate bundle to be deployed to the staging workspace
    - script: |
        databricks bundle validate -t staging
      workingDirectory: $(workingDirectory)
      displayName: 'Validate bundle for staging'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(STAGING_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        {{- end }}


  - job: prodBundleCI
    displayName: 'Prod bundle validation for {{template `project_name` .}}'
    dependsOn: []   # Removes the implicit dependency on previous job and force prodBundleCI job to run in parallel

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Validate bundle to be deployed to the prod workspace
    - script: |
        databricks bundle validate -t prod
      workingDirectory: $(workingDirectory)
      displayName: 'Validate bundle for prod'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(PROD_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        {{- end }}

# Run StagingBundleCD stage after successfully merging into the {{template `default_branch` .}} branch
- stage: StagingBundleCD
  displayName: 'Staging bundle deployment for {{template `project_name` .}}'
  # Trigger deployment of bundle assets when PRs are merged into the {{template `default_branch` .}} branch
  condition: |
    and(
      eq(variables['Build.SourceBranch'], 'refs/heads/{{template `default_branch` .}}'),
      not(eq(variables['Build.Reason'], 'PullRequest'))
    )

  jobs:
  - job: StagingBundleCD
    displayName: 'Bundle Deployment for {{template `project_name` .}} Staging'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

      # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Validate bundle to be deployed to the Staging workspace
    - script: |
        databricks bundle validate -t staging
      workingDirectory: $(workingDirectory)
      displayName: 'Validate bundle for staging'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(STAGING_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        {{- end }}

    # Deploy bundle to Staging workspace
    - script: |
        databricks bundle deploy -t staging
      workingDirectory: $(workingDirectory)
      displayName: 'Deploy bundle to staging'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(STAGING_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        {{- end }}

# Run prod bundle CD stage after successfully merging into the {{template `release_branch` .}} branch
- stage: prodBundleCD
  displayName: 'Prod bundle deployment for {{template `project_name` .}}'
  # Trigger deployment of Bundle assets when PRs are merged into the {{template `release_branch` .}} branch
  condition: |
    and(
      eq(variables['Build.SourceBranch'], 'refs/heads/{{template `release_branch` .}}'),
      not(eq(variables['Build.Reason'], 'PullRequest'))
    )

  jobs:
  - job: prodBundleCD
    displayName: 'Bundle deployment for {{template `project_name` .}} prod'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

      # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Validate bundle to be deployed to the prod workspace
    - script: |
        databricks bundle validate -t prod
      workingDirectory: $(workingDirectory)
      displayName: 'Validate bundle for prod'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(PROD_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        {{- end }}

    # Deploy bundle to prod workspace
    - script: |
        databricks bundle deploy -t prod
      workingDirectory: $(workingDirectory)
      displayName: 'Deploy bundle to prod'
      env:
        {{ if (eq .input_cloud `aws`) -}}
        DATABRICKS_TOKEN: $(PROD_WORKSPACE_TOKEN)
        {{- else if (eq .input_cloud `azure`) -}}
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        {{- end }}
