# This GitHub workflow validates Bundle config (ML asset config and more)
# defined under {{template `project_name_alphanumeric_underscore` .}}/assets/*
# and {{template `project_name_alphanumeric_underscore` .}}/databricks.yml, when PRs are merged into the main branch
name: Bundle validation for {{template `project_name` .}}

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '{{template `project_name_alphanumeric_underscore` .}}/**'

defaults:
  run:
    working-directory: ./{{template `project_name_alphanumeric_underscore` .}}/

env:
  {{ if (eq .input_cloud `aws`) -}}
  STAGING_WORKSPACE_TOKEN: {{`${{ secrets.STAGING_WORKSPACE_TOKEN }}`}}
  PROD_WORKSPACE_TOKEN: {{`${{ secrets.PROD_WORKSPACE_TOKEN }}`}}
  {{- else if (eq .input_cloud `azure`) -}}
  STAGING_ARM_TENANT_ID: {{`${{ secrets.STAGING_AZURE_SP_TENANT_ID }}`}}
  STAGING_ARM_CLIENT_ID: {{`${{ secrets.STAGING_AZURE_SP_APPLICATION_ID }}`}}
  STAGING_ARM_CLIENT_SECRET: {{`${{ secrets.STAGING_AZURE_SP_CLIENT_SECRET }}`}}
  PROD_ARM_TENANT_ID: {{`${{ secrets.PROD_AZURE_SP_TENANT_ID }}`}}
  PROD_ARM_CLIENT_ID: {{`${{ secrets.PROD_AZURE_SP_APPLICATION_ID }}`}}
  PROD_ARM_CLIENT_SECRET: {{`${{ secrets.PROD_AZURE_SP_CLIENT_SECRET }}`}}
  {{- end }}

jobs:
  staging:
    concurrency: {{template `project_name` .}}-staging-bundle-job
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: {{`${{ github.event.pull_request.head.sha || github.sha }}`}}
      - uses: databricks/setup-cli@v0.211.0
      - name: Validate Bundle For Staging
        id: validate
        env:
          {{ if (eq .input_cloud `aws`) -}}
          DATABRICKS_TOKEN: {{`${{ env.STAGING_WORKSPACE_TOKEN }}`}}
          {{- else if (eq .input_cloud `azure`) -}}
          ARM_TENANT_ID: {{`${{ env.STAGING_ARM_TENANT_ID }}`}}
          ARM_CLIENT_ID: {{`${{ env.STAGING_ARM_CLIENT_ID }}`}}
          ARM_CLIENT_SECRET: {{`${{ env.STAGING_ARM_CLIENT_SECRET }}`}}
          {{- end }}
        run: |
          databricks bundle validate -t staging > ../validate_output.txt
      - name: Create Comment with Bundle Configuration
        uses: actions/github-script@v6
        id: comment
        with:
          github-token: {{`${{ secrets.GITHUB_TOKEN }}`}}
          script: |
            const fs = require('fs');
            const fileContents = fs.readFileSync('validate_output.txt', 'utf8');
            const output = `#### Bundle Staging Config Validated ðŸ–Œ
            <details><summary>Staging Validation Output</summary>

            \`\`\`\n
            ${fileContents}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  prod:
    concurrency: {{template `project_name` .}}-prod-bundle-job
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: {{`${{ github.event.pull_request.head.sha || github.sha }}`}}
      - uses: databricks/setup-cli@v0.211.0
      - name: Validate Bundle For Prod
        id: validate
        env:
          {{ if (eq .input_cloud `aws`) -}}
          DATABRICKS_TOKEN: {{`${{ env.PROD_WORKSPACE_TOKEN }}`}}
          {{- else if (eq .input_cloud `azure`) -}}
          ARM_TENANT_ID: {{`${{ env.PROD_ARM_TENANT_ID }}`}}
          ARM_CLIENT_ID: {{`${{ env.PROD_ARM_CLIENT_ID }}`}}
          ARM_CLIENT_SECRET: {{`${{ env.PROD_ARM_CLIENT_SECRET }}`}}
          {{- end }}
        run: |
          databricks bundle validate -t prod > ../validate_output.txt
      - name: Create Comment with Bundle Configuration
        uses: actions/github-script@v6
        id: comment
        with:
          github-token: {{`${{ secrets.GITHUB_TOKEN }}`}}
          script: |
            const fs = require('fs');
            const fileContents = fs.readFileSync('validate_output.txt', 'utf8');
            const output = `#### Bundle Prod Config Validated ðŸ–Œ
            <details><summary>Prod Validation Output</summary>

            \`\`\`\n
            ${fileContents}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
